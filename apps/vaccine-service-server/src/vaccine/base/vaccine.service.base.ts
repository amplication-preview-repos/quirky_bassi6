/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Vaccine as PrismaVaccine } from "@prisma/client";

export class VaccineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VaccineCountArgs, "select">): Promise<number> {
    return this.prisma.vaccine.count(args);
  }

  async vaccines<T extends Prisma.VaccineFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VaccineFindManyArgs>
  ): Promise<PrismaVaccine[]> {
    return this.prisma.vaccine.findMany<Prisma.VaccineFindManyArgs>(args);
  }
  async vaccine<T extends Prisma.VaccineFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VaccineFindUniqueArgs>
  ): Promise<PrismaVaccine | null> {
    return this.prisma.vaccine.findUnique(args);
  }
  async createVaccine<T extends Prisma.VaccineCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VaccineCreateArgs>
  ): Promise<PrismaVaccine> {
    return this.prisma.vaccine.create<T>(args);
  }
  async updateVaccine<T extends Prisma.VaccineUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VaccineUpdateArgs>
  ): Promise<PrismaVaccine> {
    return this.prisma.vaccine.update<T>(args);
  }
  async deleteVaccine<T extends Prisma.VaccineDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VaccineDeleteArgs>
  ): Promise<PrismaVaccine> {
    return this.prisma.vaccine.delete(args);
  }
}
