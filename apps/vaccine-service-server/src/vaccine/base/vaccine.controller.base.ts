/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VaccineService } from "../vaccine.service";
import { VaccineCreateInput } from "./VaccineCreateInput";
import { Vaccine } from "./Vaccine";
import { VaccineFindManyArgs } from "./VaccineFindManyArgs";
import { VaccineWhereUniqueInput } from "./VaccineWhereUniqueInput";
import { VaccineUpdateInput } from "./VaccineUpdateInput";

export class VaccineControllerBase {
  constructor(protected readonly service: VaccineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vaccine })
  async createVaccine(
    @common.Body() data: VaccineCreateInput
  ): Promise<Vaccine> {
    return await this.service.createVaccine({
      data: data,
      select: {
        batchNumber: true,
        createdAt: true,
        description: true,
        id: true,
        instock: true,
        updatedAt: true,
        vaccineName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vaccine] })
  @ApiNestedQuery(VaccineFindManyArgs)
  async vaccines(@common.Req() request: Request): Promise<Vaccine[]> {
    const args = plainToClass(VaccineFindManyArgs, request.query);
    return this.service.vaccines({
      ...args,
      select: {
        batchNumber: true,
        createdAt: true,
        description: true,
        id: true,
        instock: true,
        updatedAt: true,
        vaccineName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vaccine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vaccine(
    @common.Param() params: VaccineWhereUniqueInput
  ): Promise<Vaccine | null> {
    const result = await this.service.vaccine({
      where: params,
      select: {
        batchNumber: true,
        createdAt: true,
        description: true,
        id: true,
        instock: true,
        updatedAt: true,
        vaccineName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vaccine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVaccine(
    @common.Param() params: VaccineWhereUniqueInput,
    @common.Body() data: VaccineUpdateInput
  ): Promise<Vaccine | null> {
    try {
      return await this.service.updateVaccine({
        where: params,
        data: data,
        select: {
          batchNumber: true,
          createdAt: true,
          description: true,
          id: true,
          instock: true,
          updatedAt: true,
          vaccineName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vaccine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVaccine(
    @common.Param() params: VaccineWhereUniqueInput
  ): Promise<Vaccine | null> {
    try {
      return await this.service.deleteVaccine({
        where: params,
        select: {
          batchNumber: true,
          createdAt: true,
          description: true,
          id: true,
          instock: true,
          updatedAt: true,
          vaccineName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
