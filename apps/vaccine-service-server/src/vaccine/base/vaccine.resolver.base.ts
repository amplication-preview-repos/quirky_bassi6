/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vaccine } from "./Vaccine";
import { VaccineCountArgs } from "./VaccineCountArgs";
import { VaccineFindManyArgs } from "./VaccineFindManyArgs";
import { VaccineFindUniqueArgs } from "./VaccineFindUniqueArgs";
import { CreateVaccineArgs } from "./CreateVaccineArgs";
import { UpdateVaccineArgs } from "./UpdateVaccineArgs";
import { DeleteVaccineArgs } from "./DeleteVaccineArgs";
import { VaccineService } from "../vaccine.service";
@graphql.Resolver(() => Vaccine)
export class VaccineResolverBase {
  constructor(protected readonly service: VaccineService) {}

  async _vaccinesMeta(
    @graphql.Args() args: VaccineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vaccine])
  async vaccines(
    @graphql.Args() args: VaccineFindManyArgs
  ): Promise<Vaccine[]> {
    return this.service.vaccines(args);
  }

  @graphql.Query(() => Vaccine, { nullable: true })
  async vaccine(
    @graphql.Args() args: VaccineFindUniqueArgs
  ): Promise<Vaccine | null> {
    const result = await this.service.vaccine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vaccine)
  async createVaccine(
    @graphql.Args() args: CreateVaccineArgs
  ): Promise<Vaccine> {
    return await this.service.createVaccine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Vaccine)
  async updateVaccine(
    @graphql.Args() args: UpdateVaccineArgs
  ): Promise<Vaccine | null> {
    try {
      return await this.service.updateVaccine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vaccine)
  async deleteVaccine(
    @graphql.Args() args: DeleteVaccineArgs
  ): Promise<Vaccine | null> {
    try {
      return await this.service.deleteVaccine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
