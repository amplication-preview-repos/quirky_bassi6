/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Medicine as PrismaMedicine } from "@prisma/client";

export class MedicineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MedicineCountArgs, "select">): Promise<number> {
    return this.prisma.medicine.count(args);
  }

  async medicines<T extends Prisma.MedicineFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicineFindManyArgs>
  ): Promise<PrismaMedicine[]> {
    return this.prisma.medicine.findMany<Prisma.MedicineFindManyArgs>(args);
  }
  async medicine<T extends Prisma.MedicineFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicineFindUniqueArgs>
  ): Promise<PrismaMedicine | null> {
    return this.prisma.medicine.findUnique(args);
  }
  async createMedicine<T extends Prisma.MedicineCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicineCreateArgs>
  ): Promise<PrismaMedicine> {
    return this.prisma.medicine.create<T>(args);
  }
  async updateMedicine<T extends Prisma.MedicineUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicineUpdateArgs>
  ): Promise<PrismaMedicine> {
    return this.prisma.medicine.update<T>(args);
  }
  async deleteMedicine<T extends Prisma.MedicineDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MedicineDeleteArgs>
  ): Promise<PrismaMedicine> {
    return this.prisma.medicine.delete(args);
  }
}
